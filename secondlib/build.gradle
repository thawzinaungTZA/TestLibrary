plugins {
    id 'com.android.library'
    id 'kotlin-android'
    id 'maven-publish'
}

android {
    compileSdkVersion 30
    buildToolsVersion "30.0.3"

    defaultConfig {
        minSdkVersion 16
        targetSdkVersion 30
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles "consumer-rules.pro"

        multiDexEnabled true
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
    defaultPublishConfig "productionRelease"
    flavorDimensions "default"
    productFlavors {
        local {
        }
        staging {
        }
        production {
        }
    }
}

dependencies {

    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation 'androidx.core:core-ktx:1.6.0'
    implementation 'androidx.appcompat:appcompat:1.3.1'
    implementation 'com.google.android.material:material:1.4.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.4'
    testImplementation 'junit:junit:4.+'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'
    implementation "androidx.multidex:multidex:2.0.1"

    implementation "io.reactivex.rxjava2:rxandroid:2.1.0"
    //network
    /*debugImplementation('com.thawzinaung.libraries:mylibrary:v2.0.2:debug@aar'){
        transitive = true
    }*/
    implementation 'com.thawzinaung.libraries:mylibrary-debug:v2.0.4'
}

def getArtificatId = { ->
    return "test-lib" // Replace with library name ID
}

//def localProperties = new Properties()
//localProperties.load(new FileInputStream(rootProject.file("local.properties")))

task sourceJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier "sources"
}

project.afterEvaluate {
    publishing {
        publications {
            maven(MavenPublication) {
                groupId = "com.thawzinaung.libraries"
                artifactId = getArtificatId()
                version = "v2.0.11"//System.getenv("VERSION_NAME")
                android.productFlavors.all { flavor ->
                    artifact("$buildDir/outputs/aar/secondlib-${flavor.name}-release.aar") {
                        classifier "${flavor.name}"
                        extension 'aar'
                    }
                }
                /*artifact("$buildDir/outputs/aar/secondlib-local-release.aar") {
                    classifier 'local'
                    extension 'aar'
                }
                artifact("$buildDir/outputs/aar/secondlib-staging-release.aar") {
                    classifier 'staging'
                    extension 'aar'
                }
                artifact("$buildDir/outputs/aar/secondlib-production-release.aar") {
                    classifier 'production'
                    extension 'aar'
                }*/
                pom.withXml {
                    def dependenciesNode = asNode().appendNode('dependencies')
                    configurations.implementation.allDependencies.each {
                        System.out.println("Dependencies" + it)
                        def dependencyNode = dependenciesNode.appendNode('dependency')
                        dependencyNode.appendNode('groupId', it.group)
                        dependencyNode.appendNode('artifactId', it.name)
                        dependencyNode.appendNode('version', it.version)
                    }
                    configurations.debugImplementation.allDependencies.each {
                        System.out.println("debugImplementation" + it)
                        def dependencyNode1 = dependenciesNode.appendNode('dependency')
                        dependencyNode1.appendNode('groupId', it.group)
                        dependencyNode1.appendNode('artifactId', it.name)
                        dependencyNode1.appendNode('version', it.version)
                    }
                    configurations.releaseImplementation.allDependencies.each {
                        System.out.println("releaseImplementation" + it)
                        def dependencyNode2 = dependenciesNode.appendNode('dependency')
                        dependencyNode2.appendNode('groupId', it.group)
                        dependencyNode2.appendNode('artifactId', it.name)
                        dependencyNode2.appendNode('version', it.version)
                    }
                }
            }
        }

        repositories {
            maven {
                name = "GitHubPackages"
/** Configure path of your package repository on Github
 *  Replace GITHUB_USERID with your/organisation Github userID and REPOSITORY with the repository name on GitHub
 */

                url = uri("https://maven.pkg.github.com/thawzinaungTZA/PrivateTestLibrary-")
                credentials {
/**Create github.properties in root project folder file with gpr.usr=GITHUB_USER_ID  & gpr.key=PERSONAL_ACCESS_TOKEN
 * OR
 * Set environment variables*/


                    username = "thawzinaungTZA"//System.getenv("GPR_USER")
                    password = "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"//System.getenv("GPR_PAT")

                }
            }
        }
    }
}
